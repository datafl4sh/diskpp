/*
 * DISK++, a template library for DIscontinuous SKeletal methods.
 *
 * Matteo Cicuttin (C) 2023
 * matteo.cicuttin@polito.it
 *
 * Politecnico di Torino - DISMA
 * Dipartimento di Matematica
 */

#pragma once

#define MESH_TYPE_TRIANGLES     "triangles"
#define MESH_TYPE_QUADRANGLES   "quadrangles"
#define MESH_TYPE_HEXAGONS      "hexagons"
#define MESH_TYPE_TETRAHEDRA    "tetrahedra"

namespace disk::lua {

/*************************************************************************/
// Lua stuff for mesh config

/* The mesh can come from the internal meshers or from a file */
enum class mesh_source {
    invalid,
    internal,
    file,
};

/* Type of mesh generated by the internal meshers */
enum class internal_mesh_type {
    invalid,
    triangles,
    quadrangles,
    hexagons,
    tetrahedra,
};

struct mesh_parameters {
    mesh_source             source;
    std::string             filename;
    internal_mesh_type      type;
    size_t                  reflevel;
    size_t                  reflevel_min;
    size_t                  reflevel_max;

    mesh_parameters()
        : source(mesh_source::invalid), type(internal_mesh_type::invalid),
          reflevel(0), reflevel_min(0), reflevel_max(0)
    {}

    void set_filename(const std::string& fn) {
        filename = fn;
        source = mesh_source::file;
    }

    std::string get_filename(void) const {
        return filename;
    }

    void set_type(const internal_mesh_type& mt) {
        type = mt;
        source = mesh_source::internal;
    }

    internal_mesh_type get_type(void) const {
        return type;
    }
};

inline void
register_mesh_usertypes(sol::state& lua)
{
    lua["mesh_source"] = lua.create_table_with(
        "internal",     mesh_source::internal,
        "file",         mesh_source::file
    );

    lua["internal_mesh_type"] = lua.create_table_with(
        "triangles",    internal_mesh_type::triangles,
        "quadrangles",  internal_mesh_type::quadrangles,
        "hexagons",     internal_mesh_type::hexagons,
        "tetrahedra",   internal_mesh_type::tetrahedra
    );

    sol::usertype<mesh_parameters> mpt = lua.new_usertype<mesh_parameters>(
        "mesh_parameters",
        sol::constructors<mesh_parameters()>()
    );
    mpt["source"] = &mesh_parameters::source;
    mpt["filename"] = sol::property(
        &mesh_parameters::get_filename,
        &mesh_parameters::set_filename
    );
    mpt["type"] = sol::property(
        &mesh_parameters::get_type,
        &mesh_parameters::set_type
    );
    mpt["reflevel"] = &mesh_parameters::reflevel;
    mpt["reflevel_min"] = &mesh_parameters::reflevel_min;
    mpt["reflevel_max"] = &mesh_parameters::reflevel_max;
}

} //namespace disk::lua