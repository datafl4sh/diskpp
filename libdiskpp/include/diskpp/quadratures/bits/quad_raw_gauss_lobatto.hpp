/*
 * DISK++, a template library for DIscontinuous SKeletal methods.
 *
 * Matteo Cicuttin (C) 2023
 * matteo.cicuttin@polito.it
 *
 * Politecnico di Torino - DISMA
 * Dipartimento di Matematica
 */

#pragma once

/* See mklobatto.cpp in apps/utils */

#include <vector>

#include "diskpp/quadratures/quadrature_point.hpp"

namespace disk::quadrature {

namespace priv {

struct lobatto_point {
    double point;
    double weight;
};

struct lobatto_point lobatto_rule_1[] = {
    {  1.0000000000000000, 2.0000000000000000 } 
};

struct lobatto_point lobatto_rule_2[] = {
    { -1.0000000000000000, 1.0000000000000000 },
    {  1.0000000000000000, 1.0000000000000000 } 
};

struct lobatto_point lobatto_rule_3[] = {
    { -1.0000000000000000, 0.3333333333333333 },
    {  0.0000000000000000, 1.3333333333333333 },
    {  1.0000000000000000, 0.3333333333333333 } 
};

struct lobatto_point lobatto_rule_4[] = {
    { -1.0000000000000000, 0.1666666666666667 },
    { -0.4472135954999579, 0.8333333333333334 },
    {  0.4472135954999579, 0.8333333333333334 },
    {  1.0000000000000000, 0.1666666666666667 } 
};

struct lobatto_point lobatto_rule_5[] = {
    { -1.0000000000000000, 0.1000000000000000 },
    { -0.6546536707079771, 0.5444444444444445 },
    {  0.0000000000000000, 0.7111111111111111 },
    {  0.6546536707079771, 0.5444444444444445 },
    {  1.0000000000000000, 0.1000000000000000 } 
};

struct lobatto_point lobatto_rule_6[] = {
    { -1.0000000000000000, 0.0666666666666667 },
    { -0.7650553239294647, 0.3784749562978469 },
    { -0.2852315164806451, 0.5548583770354865 },
    {  0.2852315164806451, 0.5548583770354865 },
    {  0.7650553239294647, 0.3784749562978469 },
    {  1.0000000000000000, 0.0666666666666667 } 
};

struct lobatto_point lobatto_rule_7[] = {
    { -1.0000000000000000, 0.0476190476190476 },
    { -0.8302238962785669, 0.2768260473615660 },
    { -0.4688487934707142, 0.4317453812098627 },
    {  0.0000000000000000, 0.4876190476190476 },
    {  0.4688487934707142, 0.4317453812098627 },
    {  0.8302238962785669, 0.2768260473615660 },
    {  1.0000000000000000, 0.0476190476190476 } 
};

struct lobatto_point lobatto_rule_8[] = {
    { -1.0000000000000000, 0.0357142857142857 },
    { -0.8717401485096067, 0.2107042271435060 },
    { -0.5917001814331423, 0.3411226924835041 },
    { -0.2092992179024789, 0.4124587946587037 },
    {  0.2092992179024789, 0.4124587946587037 },
    {  0.5917001814331423, 0.3411226924835041 },
    {  0.8717401485096067, 0.2107042271435060 },
    {  1.0000000000000000, 0.0357142857142857 } 
};

struct lobatto_point lobatto_rule_9[] = {
    { -1.0000000000000000, 0.0277777777777778 },
    { -0.8997579954114602, 0.1654953615608056 },
    { -0.6771862795107377, 0.2745387125001617 },
    { -0.3631174638261782, 0.3464285109730464 },
    {  0.0000000000000000, 0.3715192743764172 },
    {  0.3631174638261782, 0.3464285109730464 },
    {  0.6771862795107377, 0.2745387125001617 },
    {  0.8997579954114602, 0.1654953615608056 },
    {  1.0000000000000000, 0.0277777777777778 } 
};

struct lobatto_point lobatto_rule_10[] = {
    { -1.0000000000000000, 0.0222222222222222 },
    { -0.9195339081664587, 0.1333059908510703 },
    { -0.7387738651055050, 0.2248893420631264 },
    { -0.4779249498104445, 0.2920426836796838 },
    { -0.1652789576663870, 0.3275397611838974 },
    {  0.1652789576663870, 0.3275397611838974 },
    {  0.4779249498104445, 0.2920426836796838 },
    {  0.7387738651055050, 0.2248893420631264 },
    {  0.9195339081664587, 0.1333059908510703 },
    {  1.0000000000000000, 0.0222222222222222 } 
};

struct lobatto_point lobatto_rule_11[] = {
    { -1.0000000000000000, 0.0181818181818182 },
    { -0.9340014304080592, 0.1096122732669947 },
    { -0.7844834736631444, 0.1871698817803051 },
    { -0.5652353269962050, 0.2480481042640282 },
    { -0.2957581355869394, 0.2868791247790080 },
    {  0.0000000000000000, 0.3002175954556907 },
    {  0.2957581355869394, 0.2868791247790080 },
    {  0.5652353269962050, 0.2480481042640282 },
    {  0.7844834736631444, 0.1871698817803051 },
    {  0.9340014304080592, 0.1096122732669947 },
    {  1.0000000000000000, 0.0181818181818182 } 
};

struct lobatto_point lobatto_rule_12[] = {
    { -1.0000000000000000, 0.0151515151515152 },
    { -0.9448992722228823, 0.0916845174131962 },
    { -0.8192793216440066, 0.1579747055643702 },
    { -0.6328761530318607, 0.2125084177610210 },
    { -0.3995309409653489, 0.2512756031992011 },
    { -0.1365529328549276, 0.2714052409106962 },
    {  0.1365529328549276, 0.2714052409106962 },
    {  0.3995309409653489, 0.2512756031992011 },
    {  0.6328761530318607, 0.2125084177610210 },
    {  0.8192793216440066, 0.1579747055643702 },
    {  0.9448992722228823, 0.0916845174131962 },
    {  1.0000000000000000, 0.0151515151515152 } 
};

struct lobatto_point lobatto_rule_13[] = {
    { -1.0000000000000000, 0.0128205128205128 },
    { -0.9533098466421639, 0.0778016867468189 },
    { -0.8463475646518723, 0.1349819266896086 },
    { -0.6861884690817575, 0.1836468652035502 },
    { -0.4829098210913362, 0.2207677935661102 },
    { -0.2492869301062400, 0.2440157903066764 },
    {  0.0000000000000000, 0.2519308493334467 },
    {  0.2492869301062400, 0.2440157903066764 },
    {  0.4829098210913362, 0.2207677935661102 },
    {  0.6861884690817575, 0.1836468652035502 },
    {  0.8463475646518723, 0.1349819266896086 },
    {  0.9533098466421639, 0.0778016867468189 },
    {  1.0000000000000000, 0.0128205128205128 } 
};

struct lobatto_point lobatto_rule_14[] = {
    { -1.0000000000000000, 0.0109890109890110 },
    { -0.9599350452672609, 0.0668372844976813 },
    { -0.8678010538303472, 0.1165866558987118 },
    { -0.7288685990913262, 0.1600218517629521 },
    { -0.5506394029286471, 0.1948261493734161 },
    { -0.3427240133427129, 0.2191262530097708 },
    { -0.1163318688837039, 0.2316127944684570 },
    {  0.1163318688837039, 0.2316127944684570 },
    {  0.3427240133427129, 0.2191262530097708 },
    {  0.5506394029286471, 0.1948261493734161 },
    {  0.7288685990913262, 0.1600218517629521 },
    {  0.8678010538303472, 0.1165866558987118 },
    {  0.9599350452672609, 0.0668372844976813 },
    {  1.0000000000000000, 0.0109890109890110 } 
};

struct lobatto_point lobatto_rule_15[] = {
    { -1.0000000000000000, 0.0095238095238095 },
    { -0.9652459265038386, 0.0580298930286013 },
    { -0.8850820442229763, 0.1016600703257181 },
    { -0.7635196899518152, 0.1405116998024280 },
    { -0.6062532054698457, 0.1727896472536009 },
    { -0.4206380547136725, 0.1969872359646133 },
    { -0.2153539553637942, 0.2119735859268209 },
    {  0.0000000000000000, 0.2170481163488157 },
    {  0.2153539553637942, 0.2119735859268209 },
    {  0.4206380547136725, 0.1969872359646133 },
    {  0.6062532054698457, 0.1727896472536009 },
    {  0.7635196899518152, 0.1405116998024280 },
    {  0.8850820442229763, 0.1016600703257181 },
    {  0.9652459265038386, 0.0580298930286013 },
    {  1.0000000000000000, 0.0095238095238095 } 
};

struct lobatto_point lobatto_rule_16[] = {
    { -1.0000000000000000, 0.0083333333333333 },
    { -0.9695680462702180, 0.0508503610059200 },
    { -0.8992005330934721, 0.0893936973259307 },
    { -0.7920082918618151, 0.1242553821325141 },
    { -0.6523887028824931, 0.1540269808071644 },
    { -0.4860594218871376, 0.1774919133917042 },
    { -0.2998304689007632, 0.1936900238252036 },
    { -0.1013262735219495, 0.2019583081782300 },
    {  0.1013262735219494, 0.2019583081782299 },
    {  0.2998304689007632, 0.1936900238252036 },
    {  0.4860594218871376, 0.1774919133917042 },
    {  0.6523887028824931, 0.1540269808071644 },
    {  0.7920082918618151, 0.1242553821325141 },
    {  0.8992005330934721, 0.0893936973259307 },
    {  0.9695680462702180, 0.0508503610059200 },
    {  1.0000000000000000, 0.0083333333333333 } 
};

struct lobatto_point lobatto_rule_17[] = {
    { -1.0000000000000000, 0.0073529411764706 },
    { -0.9731321766314184, 0.0449219405432543 },
    { -0.9108799959155736, 0.0791982705036871 },
    { -0.8156962512217703, 0.1105929090070282 },
    { -0.6910289806276847, 0.1379877462019267 },
    { -0.5413853993301015, 0.1603946619976216 },
    { -0.3721744335654770, 0.1770042535156578 },
    { -0.1895119735183174, 0.1872163396776193 },
    {  0.0000000000000000, 0.1906618747534694 },
    {  0.1895119735183174, 0.1872163396776193 },
    {  0.3721744335654770, 0.1770042535156578 },
    {  0.5413853993301015, 0.1603946619976216 },
    {  0.6910289806276847, 0.1379877462019267 },
    {  0.8156962512217703, 0.1105929090070282 },
    {  0.9108799959155736, 0.0791982705036871 },
    {  0.9731321766314184, 0.0449219405432543 },
    {  1.0000000000000000, 0.0073529411764706 } 
};

struct lobatto_point lobatto_rule_18[] = {
    { -1.0000000000000000, 0.0065359477124183 },
    { -0.9761055574121985, 0.0399706288109139 },
    { -0.9206491853475339, 0.0706371668856337 },
    { -0.8355935352180902, 0.0990162717175028 },
    { -0.7236793292832426, 0.1242105331329672 },
    { -0.5885048343186617, 0.1454119615738023 },
    { -0.4344150369121240, 0.1619395172376024 },
    { -0.2663626528782810, 0.1732621094894563 },
    { -0.0897490934846521, 0.1790158634397031 },
    {  0.0897490934846521, 0.1790158634397031 },
    {  0.2663626528782810, 0.1732621094894563 },
    {  0.4344150369121240, 0.1619395172376024 },
    {  0.5885048343186617, 0.1454119615738023 },
    {  0.7236793292832426, 0.1242105331329672 },
    {  0.8355935352180902, 0.0990162717175028 },
    {  0.9206491853475339, 0.0706371668856337 },
    {  0.9761055574121985, 0.0399706288109139 },
    {  1.0000000000000000, 0.0065359477124183 } 
};

struct lobatto_point lobatto_rule_19[] = {
    { -1.0000000000000000, 0.0058479532163743 },
    { -0.9786117662220801, 0.0357933651861766 },
    { -0.9289015281525862, 0.0633818917626298 },
    { -0.8524605777966461, 0.0891317570992071 },
    { -0.7514942025526130, 0.1123153414773051 },
    { -0.6289081372652205, 0.1322672804487508 },
    { -0.4882292856807135, 0.1484139425959388 },
    { -0.3335048478244986, 0.1602909240440613 },
    { -0.1691860234092816, 0.1675565845271428 },
    {  0.0000000000000000, 0.1700019192848272 },
    {  0.1691860234092816, 0.1675565845271428 },
    {  0.3335048478244986, 0.1602909240440613 },
    {  0.4882292856807135, 0.1484139425959388 },
    {  0.6289081372652205, 0.1322672804487508 },
    {  0.7514942025526130, 0.1123153414773051 },
    {  0.8524605777966461, 0.0891317570992071 },
    {  0.9289015281525862, 0.0633818917626298 },
    {  0.9786117662220801, 0.0357933651861766 },
    {  1.0000000000000000, 0.0058479532163743 } 
};
 
struct lobatto_point lobatto_rule_20[] = {
    { -1.0000000000000000, 0.0052631578947368 },
    { -0.9807437048939142, 0.0322371231884890 },
    { -0.9359344988126654, 0.0571818021275669 },
    { -0.8668779780899502, 0.0806317639961196 },
    { -0.7753682609520559, 0.1019914996994507 },
    { -0.6637764022903113, 0.1207092276286747 },
    { -0.5349928640318863, 0.1363004823587242 },
    { -0.3923531837139093, 0.1483615540709168 },
    { -0.2395517059229865, 0.1565801026474754 },
    { -0.0805459372388218, 0.1607432863878458 },
    {  0.0805459372388218, 0.1607432863878458 },
    {  0.2395517059229865, 0.1565801026474754 },
    {  0.3923531837139093, 0.1483615540709168 },
    {  0.5349928640318863, 0.1363004823587242 },
    {  0.6637764022903113, 0.1207092276286747 },
    {  0.7753682609520559, 0.1019914996994507 },
    {  0.8668779780899502, 0.0806317639961196 },
    {  0.9359344988126654, 0.0571818021275669 },
    {  0.9807437048939142, 0.0322371231884890 },
    {  1.0000000000000000, 0.0052631578947368 } 
};

struct lobatto_rule {
    size_t          num_entries;
    lobatto_point     *points;
};


static struct lobatto_rule lobatto_rules[] = {
    {  sizeof(lobatto_rule_1)/(sizeof(lobatto_point)), lobatto_rule_1  },
    {  sizeof(lobatto_rule_2)/(sizeof(lobatto_point)), lobatto_rule_2  },
    {  sizeof(lobatto_rule_3)/(sizeof(lobatto_point)), lobatto_rule_3  },
    {  sizeof(lobatto_rule_4)/(sizeof(lobatto_point)), lobatto_rule_4  },
    {  sizeof(lobatto_rule_5)/(sizeof(lobatto_point)), lobatto_rule_5  },
    {  sizeof(lobatto_rule_6)/(sizeof(lobatto_point)), lobatto_rule_6  },
    {  sizeof(lobatto_rule_7)/(sizeof(lobatto_point)), lobatto_rule_7  },
    {  sizeof(lobatto_rule_8)/(sizeof(lobatto_point)), lobatto_rule_8  },
    {  sizeof(lobatto_rule_9)/(sizeof(lobatto_point)), lobatto_rule_9  },
    { sizeof(lobatto_rule_10)/(sizeof(lobatto_point)), lobatto_rule_10 },
    { sizeof(lobatto_rule_11)/(sizeof(lobatto_point)), lobatto_rule_11 },
    { sizeof(lobatto_rule_12)/(sizeof(lobatto_point)), lobatto_rule_12 },
    { sizeof(lobatto_rule_13)/(sizeof(lobatto_point)), lobatto_rule_13 },
    { sizeof(lobatto_rule_14)/(sizeof(lobatto_point)), lobatto_rule_14 },
    { sizeof(lobatto_rule_15)/(sizeof(lobatto_point)), lobatto_rule_15 },
    { sizeof(lobatto_rule_16)/(sizeof(lobatto_point)), lobatto_rule_16 },
    { sizeof(lobatto_rule_17)/(sizeof(lobatto_point)), lobatto_rule_17 },
    { sizeof(lobatto_rule_18)/(sizeof(lobatto_point)), lobatto_rule_18 },
    { sizeof(lobatto_rule_19)/(sizeof(lobatto_point)), lobatto_rule_19 },
    { sizeof(lobatto_rule_20)/(sizeof(lobatto_point)), lobatto_rule_20 },
};

} // namespace priv

template<typename T>
std::vector<quadrature_point<T,1>>
gauss_lobatto(size_t degree, const T& a, const T& b)
{
    const auto num_rules = sizeof(priv::lobatto_rules)/sizeof(priv::lobatto_rule);
    if (degree % 2 == 0)
        degree += 1;
    const auto rule_num = (degree+3)/2 - 1;
    if (rule_num >= num_rules)
        throw std::invalid_argument("gauss_legendre: order too high");

    auto npts = priv::lobatto_rules[rule_num].num_entries;
    std::vector<quadrature_point<T,1>> qps;
    qps.reserve(npts);
    for (size_t i = 0; i < npts; i++) {
        const auto &qp = priv::lobatto_rules[rule_num].points[i];
        auto tr_qp = 0.5*(a+b) + 0.5*(b-a)*qp.point;
        auto tr_qw = 0.5 * (b-a) * qp.weight;
        qps.push_back({tr_qp, tr_qw});
    }

    return qps;
}

template<typename T, size_t DIM>
std::vector<quadrature_point<T,DIM>>
gauss_lobatto(size_t degree, const point<T,DIM>& a, const point<T,DIM>& b)
{
    const auto num_rules = sizeof(priv::lobatto_rules)/sizeof(priv::lobatto_rule);
    if (degree % 2 == 0)
        degree += 1;
    const auto rule_num = (degree+3)/2 - 1;
    if (rule_num >= num_rules)
        throw std::invalid_argument("gauss_legendre: order too high");

    const auto& qrule = priv::lobatto_rules[rule_num];
    auto npts = qrule.num_entries;
    std::vector<quadrature_point<T,DIM>> qps;
    qps.reserve(npts);
    for (size_t i = 0; i < npts; i++) {
        const auto &qp = qrule.points[i];
        auto tr_qp = 0.5 * (a + b) + 0.5 * (b - a) * qp.point;
        auto tr_qw = 0.5 * distance(a,b) * qp.weight;
        qps.push_back({tr_qp, tr_qw});
    }

    return qps;
}

} // namespace disk::quadrature
